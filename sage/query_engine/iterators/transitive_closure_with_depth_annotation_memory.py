# transitive_closure.py
# Author: Julien AIMONIER-DAVAT - MIT License 2017-2020
from typing import Dict, List, Optional, Tuple

from sage.query_engine.iterators.preemptable_iterator import PreemptableIterator
from sage.query_engine.protobuf.iterators_pb2 import (SavedTransitiveClosureIterator)
from sage.query_engine.protobuf.utils import pyDict_to_protoDict

class TransitiveClosureIterator(PreemptableIterator):
    """A TransitiveClosureIterator evaluates the transitive closure of a relation
    defined by a property path expression.

    It can be used as the starting iterator in a pipeline of iterators.

    Args:
      * subject: The node from which all paths must start. A variable at the subject position means 
        that the transitive closure is evaluated from all the nodes.
      * obj: The node to which all paths must end. A variable at the object position means that all
        the paths are part of the final result.
      * iterators: A list of preemptable iterators used to evaluate the transitive closure. 
      * var_prefix: A common prefix used by all iterators to identify the variables whose values are
        the current path nodes.
      * bindings: The last solution mappings generated by each iterator.
      * current_depth: The depth of the current path.
      * min_depth: The minimum depth for a path to be part of the final result.
      * max_depth: The maximum depth for a path to be part of the final result.
      * complete: False if there is a path of length (max_depth + 1) that match the transitive closure
        expression, True otherwise.
    """

    def __init__(self, subject: str, obj: str, iterators: List[PreemptableIterator], var_prefix: str, bindings: List[Dict[str, str]] = None, current_depth: int = 0, min_depth: int = 1, max_depth: int = 10, complete: bool = True):
        super(TransitiveClosureIterator, self).__init__()
        self._subject = subject
        self._obj = obj
        self._iterators = iterators
        self._var_prefix = var_prefix
        self._bindings = bindings if bindings is not None else [None] * (max_depth + 1)
        self._current_depth = current_depth
        self._min_depth = min_depth
        self._max_depth = max_depth
        self._complete = complete
        self._visited = dict()
        # Initialized the list of visited node with the current path
        if bindings is not None and bindings[0] is not None:
            first_node = self.first_node()
            if min_depth == 0:
                self._visited[first_node] = {first_node: 0}
            else:
                self._visited[first_node] = {}
            for i in range(0, current_depth):
                node = self.path_node(i)
                self._visited[first_node][node] = i + 1

    def __len__(self) -> int:
        """Get an approximation of the result's cardinality of the iterator"""
        return (self._iterators[0].__len__() + self._iterators[self._max_depth].__len__()) / 2

    def __repr__(self) -> str:
        return f"<TransitiveClosureIterator [{self._min_depth}:{self._max_depth}] ({self._iterators})>"

    def serialized_name(self):
        """Get the name of the iterator, as used in the plan serialization protocol"""
        return "transitive_closure"

    def has_next(self) -> bool:
        """Return True if the iterator has more item to yield"""
        return self._current_depth > 0 or self._iterators[0].has_next()

    def next_stage(self, binding: Dict[str, str]):
        """Set the current binding and reset the scan iterator. Used to compute the nested loop joins"""
        self._bindings = [None] * (self._max_depth + 1)
        self._current_depth = 0
        self._visited = dict()
        self._iterators[0].next_stage(binding)

    def first_node(self) -> str:
        """Return the first node of the current path"""
        if self._subject.startswith('?'):
            return self._bindings[0][self._subject]
        else:
            return self._subject

    def path_node(self, position: int) -> str:
        if position <= self._current_depth:
            variable = f'?{self._var_prefix}{position}'
            return self._bindings[position][variable]
        else:
            return self.last_node()

    def last_node(self) -> str:
        """Return the last node of the current path"""
        variable = f'?{self._var_prefix}{self._current_depth}'
        return self._bindings[self._current_depth][variable]

    def backtrack(self) -> int:
        """
        Find the closest parent of the last node whose at least one child has not been explored
        Return the depth of the parent
        """
        i = self._current_depth
        while i > 0 and not self._iterators[i].has_next():
            self._bindings[i] = None
            i = i - 1
        return i        

    def visited(self):
        """
        Check if the last node of the current path has already been visited and mark it as a visited node
        Return True if the last node has already been visited, False otherwise
        """
        first_node = self.first_node()
        last_node = self.last_node()
        if first_node not in self._visited:
            if self._min_depth == 0:
                self._visited[first_node] = {first_node: 0}
            else:
                self._visited[first_node] = {}
        if last_node in self._visited[first_node]:
            if self._visited[first_node][last_node] <= self._current_depth + 1:
                return True
        self._visited[first_node][last_node] = self._current_depth + 1
        return False

    def cycle(self):
        """
        Check if the current path contains a cycle
        Return True if the current path contains a cycle, False otherwise
        """
        if self._min_depth == 0:
            first_node = self.first_node()
            path_nodes = {first_node: None}
        else:
            path_nodes = {}
        for i in range (0, self._current_depth + 1):
            node = self._bindings[i][f'?{self._var_prefix}{i}']
            if node in path_nodes:
                return True
            path_nodes[node] = None
        return False

    def expand_current_path(self) -> int:
        """
        Try to expand the current path
        Return the depth of the extended path
        """
        i = self._current_depth
        last_binding = self._bindings[i]
        if i < self._max_depth - 1:
            self._iterators[i + 1].next_stage(last_binding)
            return i + 1
        elif i == self._max_depth - 1 and self._complete:
            self._iterators[i + 1].next_stage(last_binding)
            self._complete = not self._iterators[i + 1].has_next()
        return i

    def is_solution(self) -> bool:
        """
        Check if the last node of the current path is part of the final result
        Return True if the last node is a solution, False otherwise
        """
        last_node = self.last_node()
        return self._obj.startswith('?') or self._obj == last_node

    async def next(self) -> Optional[Dict[str, str]]:
        """Get the next item from the iterator, following the iterator protocol.

        This function may contains `non interruptible` clauses which must
        be atomically evaluated before preemption occurs.

        Returns: A set of solution mappings, or `None` if none was produced during this call.

        Throws: `StopAsyncIteration` if the iterator cannot produce more items.
        """
        if not self.has_next():
            return None
        self._current_depth = self.backtrack()
        if self._iterators[self._current_depth].has_next():
            current_binding = await self._iterators[self._current_depth].next()
            if current_binding is None:
                return None
            self._bindings[self._current_depth] = current_binding

            if self.visited() or self.cycle():
                return None

            if self.is_solution():
                solution_mapping = {}
                if self._subject.startswith('?'):
                    solution_mapping[self._subject] = self._bindings[0][self._subject]
                if self._obj.startswith('?'):
                    solution_mapping[self._obj] = self.last_node()
            else:
                solution_mapping = None

            self._current_depth = self.expand_current_path()
            return solution_mapping
        return None

    def save(self) -> SavedTransitiveClosureIterator:
        """Save and serialize the iterator as a Protobuf message"""
        saved_transitive = SavedTransitiveClosureIterator()
        saved_transitive.subject = self._subject
        saved_transitive.obj = self._obj
        saved_iterators = []
        for it in self._iterators:
            saved_it = SavedTransitiveClosureIterator.PreemptableIterator()
            it_field = it.serialized_name() + '_iterator'
            getattr(saved_it, it_field).CopyFrom(it.save())
            saved_iterators.append(saved_it)
        saved_transitive.iterators.extend(saved_iterators)
        saved_transitive.var_prefix = self._var_prefix
        saved_bindings = []
        for i in range(0, self._current_depth):
            saved_binding = SavedTransitiveClosureIterator.Bindings()
            pyDict_to_protoDict(self._bindings[i], saved_binding.binding)
            saved_bindings.append(saved_binding)
        saved_transitive.bindings.extend(saved_bindings)
        saved_transitive.current_depth = self._current_depth
        saved_transitive.min_depth = self._min_depth
        saved_transitive.max_depth = self._max_depth
        saved_transitive.complete = self._complete
        return saved_transitive