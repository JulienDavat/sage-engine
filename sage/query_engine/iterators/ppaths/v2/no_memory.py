# transitive_closure.py
# Author: Julien AIMONIER-DAVAT - MIT License 2017-2020
import time
from typing import Dict, List, Optional, Tuple

from sage.database.core.dataset import Dataset
from sage.query_engine.iterators.preemptable_iterator import PreemptableIterator
from sage.query_engine.iterators.ppaths.v2.dls import DLSIterator
from sage.query_engine.iterators.ppaths.control_tuples_memory import ControlTuplesBuffer
from sage.query_engine.protobuf.iterators_pb2 import (SavedTransitiveClosureIterator, SavedDLS)
from sage.query_engine.protobuf.utils import pyDict_to_protoDict
import sage.query_engine.iterators.loader as loader

class TransitiveClosureIterator(DLSIterator):
    """A TransitiveClosureIterator evaluates the transitive closure of a relation
    defined by a property path expression.

    It can be used as the starting iterator in a pipeline of iterators.

    Args:
      * subject: The node from which all paths must start. A variable at the subject position means 
        that the transitive closure is evaluated from all the nodes.
      * obj: The node to which all paths must end. A variable at the object position means that all
        the paths are part of the final result.
      * iterators: A list of preemptable iterators used to evaluate the transitive closure. 
      * bindings: The last solution mappings generated by each iterator.
      * current_depth: The depth of the current path.
      * min_depth: The minimum depth for a path to be part of the final result.
      * max_depth: The maximum depth for a path to be part of the final result.
    """

    def __init__(self, id: int, subject: str, path: str, obj: str, iterator: PreemptableIterator, forward: bool, dataset: Dataset, stack: Optional[List[PreemptableIterator]] = None, mu: Optional[Dict[str, str]] = None, bindings: List[Dict[str, str]] = None, min_depth: int = 1, max_depth: int = 10, complete: bool = True):
        super(TransitiveClosureIterator, self).__init__(id, subject, path, obj, iterator, forward, dataset, stack, mu, bindings, min_depth, max_depth)
        print('NoMemory')

    def __repr__(self) -> str:
        return f"<TransitiveClosureIterator:AdvancedDepthAnnotationMemory [{self._min_depth}:{self._max_depth}] ({self._path})>"

    def serialized_name(self):
        """Get the name of the iterator, as used in the plan serialization protocol"""
        return "dls"

    def must_explore(self, node):
        for depth in range (len(self._stack) - 1):
            previous = self.get_node(depth)
            if node == previous:
                return False
        return True

    async def next(self) -> Optional[Dict[str, str]]:
        if len(self._stack) > 0:
            iterator = loader.load(self._stack.pop(), self._dataset, ControlTuplesBuffer())
            depth = len(self._stack)
            self._bindings[depth] = None
            if iterator.has_next():
                current_binding = await iterator.next()
                self._bindings[depth] = current_binding
                self._stack.append(iterator.save())
                if current_binding is None:
                    return None, False, 0
                node = current_binding['?node']
                if self.is_goal_reached():
                    self._bindings[depth] = None
                    return None, False, 0
                if not self.must_explore(node):
                    self._bindings[depth] = None
                    return None, False, 0
                if len(self._stack) < self._max_depth:
                    self._iterator.next_stage({'?source': node})
                    self._stack.append(self._iterator.save())
                solution = self.build_solution(node)
                return solution, self.is_solution(node), depth
        return None, False, 0