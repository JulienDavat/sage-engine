# transitive_closure.py
# Author: Julien AIMONIER-DAVAT - MIT License 2017-2020
from typing import Dict, List, Optional, Tuple

from sage.query_engine.iterators.preemptable_iterator import PreemptableIterator
from sage.query_engine.protobuf.iterators_pb2 import (SavedTransitiveClosureIterator)
from sage.query_engine.protobuf.utils import pyDict_to_protoDict

class TransitiveClosureIterator(PreemptableIterator):
    """A TransitiveClosureIterator evaluates the transitive closure of a relation
    defined by a property path expression.

    It can be used as the starting iterator in a pipeline of iterators.

    Args:
      * subject: The path pattern subject.
      * obj: The path pattern object.
      * zero: True if the closure is transitive and reflexive, False if the closure is only transitive.
      * iterators: A list of preemptable iterators used to compute the transitive closure. 
      * var_prefix: A common prefix used by all iterators to extract the nodes that are part of the final
        result from the solution mappings generated by each iterator.
      * bindings: The last solution mapping generated by each iterator.
      * current_depth: The length of the current path.
      * min_depth: The minimum length for a path to be part of the final result.
      * max_depth: The maximum length for a path to be part of the final result.
      * complete: False if there is a path of length (max_depth + 1) that match the transitive closure
        expression, True otherwise.
    """

    def __init__(self, subject: str, obj: str, zero: bool, iterators: List[PreemptableIterator], var_prefix: str, bindings: List[Dict[str, str]] = None, current_depth: int = 0, min_depth: int = 1, max_depth: int = 10, complete: bool = True):
        super(TransitiveClosureIterator, self).__init__()
        self._subject = subject
        self._obj = obj
        self._zero = zero
        self._iterators = iterators
        self._var_prefix = var_prefix
        self._bindings = bindings if bindings is not None else [None] * (max_depth + 1)
        self._current_depth = current_depth
        self._min_depth = min_depth
        self._max_depth = max_depth
        self._complete = complete
        self._visited = dict()

    def __len__(self) -> int:
        return 0

    def __repr__(self) -> str:
        return f"<ScanIterator ({self._triple['subject']} {self._triple['predicate']} {self._triple['object']})>"

    def serialized_name(self):
        """Get the name of the iterator, as used in the plan serialization protocol"""
        return "transitive_closure"

    def has_next(self) -> bool:
        """Return True if the iterator has more item to yield"""
        return self._current_depth > 0 or self._iterators[0].has_next()

    def next_stage(self, binding: Dict[str, str]):
        """Set the current binding and reset the scan iterator. Used to compute the nested loop joins"""
        self._bindings = [None] * (self._max_depth + 1)
        self._current_depth = 0
        self._visited = dict()
        self._iterators[0].next_stage(binding)

    def extract_last_node(self, current_binding) -> Optional[str]:
        variable = f'?{self._var_prefix}{self._current_depth}'
        return current_binding[variable]

    def backtrack(self) -> int:
        i = self._current_depth
        while i > 0 and not self._iterators[i].has_next():
            self._bindings[i] = None
            i = i - 1
        return i        

    def reset_visited_nodes_if_necessary(self, previous_binding, current_binding):
        if self._current_depth > 0:
            return
        if previous_binding is None:
            if self._zero:
                if self._subject.startswith('?'):
                    first_node = current_binding[self._subject]
                else:
                    first_node = self._subject
                self._visited = {first_node: None}
            else:
                self._visited = {}
        elif self._subject.startswith('?') and previous_binding[self._subject] != current_binding[self._subject]:
            if self._zero:
                first_node = current_binding[self._subject]
                self._visited = {first_node: None}
            else:
                self._visited = {}

    def visited(self, current_binding):
        last_node = self.extract_last_node(current_binding)
        if last_node in self._visited:
            return True
        self._visited[last_node] = None
        return False

    def cycle(self):
        memory = {}
        for i in range (0, self._current_depth + 1):
            node = self._bindings[i][f'?{self._var_prefix}{i}']
            if node in memory:
                return True
            memory[node] = None
        return False

    def expand_current_path(self, current_binding) -> int:
        i = self._current_depth
        if ( i < self._max_depth - 1 ) or ( i == self._max_depth - 1 and self._complete ):
            self._iterators[i + 1].next_stage(current_binding)
            i = i + 1
        return i

    def is_solution(self, current_binding) -> bool:
        last_node = self.extract_last_node(current_binding)
        return self._obj.startswith('?') or self._obj == last_node

    async def next(self) -> Optional[Dict[str, str]]:
        """Get the next item from the iterator, following the iterator protocol.

        This function may contains `non interruptible` clauses which must
        be atomically evaluated before preemption occurs.

        Returns: A set of solution mappings, or `None` if none was produced during this call.

        Throws: `StopAsyncIteration` if the iterator cannot produce more items.
        """
        if not self.has_next():
            return None
        self._current_depth = self.backtrack()
        if self._iterators[self._current_depth].has_next():
            current_binding = await self._iterators[self._current_depth].next()
            self.reset_visited_nodes_if_necessary(self._bindings[0], current_binding)
            self._bindings[self._current_depth] = current_binding
            if self.visited(current_binding) or self.cycle():
                return None
            i = self.expand_current_path(current_binding)
            if self.is_solution(current_binding):
                if self._current_depth == self._max_depth:
                    self._complete = False
                    solution_mapping = None
                else:
                    solution_mapping = {}
                    if self._subject.startswith('?'):
                        solution_mapping[self._subject] = self._bindings[0][self._subject]
                    if self._obj.startswith('?'):
                        solution_mapping[self._obj] = self.extract_last_node(current_binding)
            else:
                solution_mapping = None
            self._current_depth = i
            return solution_mapping
        return None

    def save(self) -> SavedTransitiveClosureIterator:
        """Save and serialize the iterator as a Protobuf message"""
        saved_transitive = SavedTransitiveClosureIterator()
        saved_transitive.subject = self._subject
        saved_transitive.obj = self._obj
        saved_transitive.zero = self._zero
        saved_iterators = []
        for it in self._iterators:
            saved_it = SavedTransitiveClosureIterator.PreemptableIterator()
            it_field = it.serialized_name() + '_iterator'
            getattr(saved_it, it_field).CopyFrom(it.save())
            saved_iterators.append(saved_it)
        saved_transitive.iterators.extend(saved_iterators)
        saved_transitive.var_prefix = self._var_prefix
        saved_bindings = []
        for binding in self._bindings:
            if binding is None:
                break
            saved_binding = SavedTransitiveClosureIterator.Bindings()
            pyDict_to_protoDict(binding, saved_binding.binding)
            saved_bindings.append(saved_binding)
        saved_transitive.bindings.extend(saved_bindings)
        saved_transitive.current_depth = self._current_depth
        saved_transitive.min_depth = self._min_depth
        saved_transitive.max_depth = self._max_depth
        saved_transitive.complete = self._complete
        return saved_transitive